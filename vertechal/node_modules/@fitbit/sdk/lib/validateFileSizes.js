"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const stream_1 = tslib_1.__importDefault(require("stream"));
const plugin_error_1 = tslib_1.__importDefault(require("plugin-error"));
const prettysize_1 = tslib_1.__importDefault(require("prettysize"));
const diagnostics_1 = require("./diagnostics");
const PLUGIN_NAME = 'validateFileSizes';
function validateFileSizes({ maxSizes, onDiagnostic, }) {
    return new stream_1.default.Transform({
        objectMode: true,
        transform(file, _, cb) {
            const expectedMaxSize = maxSizes[file.relative];
            if (file.isNull() || expectedMaxSize === undefined) {
                return cb(undefined, file);
            }
            if (!file.isBuffer()) {
                return cb(new plugin_error_1.default(PLUGIN_NAME, `File is not a buffer: ${file.relative}`, {
                    fileName: file.relative,
                }));
            }
            const actualSize = file.contents.byteLength;
            if (actualSize > expectedMaxSize) {
                onDiagnostic({
                    category: diagnostics_1.DiagnosticCategory.Error,
                    messageText: `${file.relative} is larger than maximum allowed size. File size was ${prettysize_1.default(actualSize)}, maximum allowed is ${prettysize_1.default(expectedMaxSize)}.`,
                });
            }
            return cb(undefined, file);
        },
    });
}
exports.default = validateFileSizes;
